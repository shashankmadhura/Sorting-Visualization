{"version":3,"sources":["SortingComponents/Algorithms/MergeSort.js","SortingComponents/Algorithms/QuickSort.js","SortingComponents/Buttons.jsx","SortingComponents/SortingVisualizer.jsx","SortingComponents/Algorithms/Bubble.js","SortingComponents/Algorithms/Selection.js","SortingComponents/Algorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["mergeSortHelper","mainArray","startIdx","endIdx","axiliaryArray","animation","midIdx","Math","floor","doMerge","k","i","j","animationobject","comparision","swap","push","QuickSortHelper","array","animations","pivotIdx","leftIdx","rightIdx","temp","Buttons","props","state","isrunning","this","setState","InsertionHandler","bubleSortHandler","selectionSortHandler","resetArrayHandler","mergeSortHandler","quickSortHandler","color","cursor","step","onChange","action","style","disabled","min","max","id","defaultValue","type","speed","backgroundColor","onClick","Component","getRandomInt","ceil","random","SortingVisualizer","resetArray","width","ARRAY_SIZE","arrayBars","document","getElementsByClassName","length","bubleSort","getElementById","innerHTML","SPEED","recieved","len","sorted","isSorted","counter","tmp","bubbleSort","newAnimation","anim","bar1index","bar2index","bar1style","bar2style","setTimeout","tempheight","height","bar","selectionSort","recieved_array","minpos","findminimum","minimum","minimunbarindex","minimumbarstyle","minbarcolor","swapbar1","swapbar2","swapbar1style","swapbar2style","insertionSort","bar1","bar2","arrayBar1Style","arrayBar2Style","arrayBarstyle","mergeSort","slice","bar1Index","bar2Index","bar1Style","bar2Style","newHeight","quickSort","QuickSort","pivotIndex","pivotstyle","onchangeHandler","e","target","value","speedHandler","className","map","idx","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAWMA,G,MAAgB,SAAhBA,EAAiBC,EAAUC,EAASC,EAAOC,EAAcC,GAC3D,GAAGH,IAAWC,EAAd,CAGA,IAAIG,EAAOC,KAAKC,OAAON,EAASC,GAAQ,GACxCH,EAAgBI,EAAcF,EAASI,EAAOL,EAAUI,GACxDL,EAAgBI,EAAcE,EAAO,EAAEH,EAAOF,EAAUI,GACxDI,EAAQR,EAAUC,EAASI,EAAOH,EAAOC,EAAcC,MAIrDI,EAAQ,SAACR,EAAUC,EAASI,EAAOH,EAAOC,EAAcC,GAKzD,IAJA,IAAIK,EAAER,EACFS,EAAET,EACFU,EAAEN,EAAO,EAEPK,GAAGL,GAAWM,GAAGT,GAAO,CAC1B,IAAMU,EAAgB,GAGtBA,EAAgBC,YAAY,CAACH,EAAEC,GAE5BR,EAAcO,IAAIP,EAAcQ,IAE/BC,EAAgBE,KAAK,CAACL,EAAEN,EAAcO,IAEtCV,EAAUS,GAAGN,EAAcO,GAC3BA,MAIAV,EAAUS,GAAGN,EAAcQ,GAE3BC,EAAgBE,KAAK,CAACL,EAAEN,EAAcQ,IACtCA,KAEJP,EAAUW,KAAKH,GACfH,IAIJ,KAAMC,GAAGL,GAELD,EAAUW,KAAK,CAACF,YAAY,CAACH,EAAEA,GAChBI,KAAK,CAACL,EAAEN,EAAcO,MAErCV,EAAUS,GAAGN,EAAcO,GAC3BA,IACAD,IAIJ,KAAME,GAAGT,GAENE,EAAUW,KAAK,CAACF,YAAY,CAACF,EAAEA,GACfG,KAAK,CAACL,EAAEN,EAAcQ,MACtCX,EAAUS,GAAGN,EAAcQ,GAC3BA,IACAF,KC1DFO,EAAgB,SAAhBA,EAAiBC,EAAMhB,EAASC,EAAOgB,GAEzC,KAAGjB,GAAUC,GAAb,CAQA,IALA,IAAIiB,EAASlB,EACTmB,EAAQnB,EAAS,EACjBoB,EAASnB,EAGPkB,GAASC,GAEPH,EAAWH,KAAK,CAACK,EAAQC,EAASF,IAClCD,EAAWH,KAAK,CAACK,EAAQC,EAASF,IAEnCF,EAAMG,GAASH,EAAME,IAAaF,EAAMI,GAAUJ,EAAME,IAEvDD,EAAWH,KAAK,CAACK,EAAQC,IACzBP,EAAKG,EAAMG,EAAQC,IAInBH,EAAWH,KAAK,CAACK,EAAQA,IAI1BH,EAAMG,IAAUH,EAAME,IACrBC,IAGDH,EAAMI,IAAWJ,EAAME,IACtBE,IAKRH,EAAWH,KAAK,CAACI,EAASE,EAASF,IACnCD,EAAWH,KAAK,CAACI,EAASE,EAASF,IACnCD,EAAWH,KAAK,CAACI,EAASE,IAE1BP,EAAKG,EAAME,EAASE,GAGSA,EAAS,EAAGpB,EAAWC,GAAQmB,EAAS,IAGjEL,EAAgBC,EAAMhB,EAASoB,EAAS,EAAEH,GAC1CF,EAAgBC,EAAMI,EAAS,EAAEnB,EAAOgB,KAGxCF,EAAgBC,EAAMI,EAAS,EAAEnB,EAAOgB,GACxCF,EAAgBC,EAAMhB,EAASoB,EAAS,EAAEH,MAO5CJ,EAAK,SAACG,EAAMP,EAAEC,GAChB,IAAIW,EAAKL,EAAMP,GACfO,EAAMP,GAAGO,EAAMN,GACfM,EAAMN,GAAGW,GCrEQC,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRC,WAAU,GAJA,E,sEAQOF,GACtBG,KAAKC,SAAS,CAAEF,UAAWF,EAAME,c,+BAG3B,IAAD,OAEDA,EAAWC,KAAKF,MAAhBC,UAFC,EAG2GC,KAAKH,MAAjHK,EAHC,EAGDA,iBAAiBC,EAHhB,EAGgBA,iBAAiBC,EAHjC,EAGiCA,qBAAqBC,EAHtD,EAGsDA,kBAAkBC,EAHxE,EAGwEA,iBAAiBC,EAHzF,EAGyFA,iBAG3FC,EAAMT,EAAU,MAAM,SACtBU,EAAQV,EAAoB,OAAV,UACrB,OACI,oCAEA,6CAAwB,2BAAOW,KAAK,IAAIC,SAAUX,KAAKH,MAAMe,OAAQC,MAAO,CAACJ,OAAOA,GAASK,SAAUf,EAAY,WAAa,KAAMgB,IAAI,IAAIC,IAAI,MAAMC,GAAG,aAAaC,aAAa,MAAMC,KAAK,UAEhM,uCAAkB,2BAAOT,KAAK,IAAIO,GAAG,QAAQC,aAAa,IAAIP,SAAUX,KAAKH,MAAMuB,MAAOP,MAAO,CAACJ,OAAOA,GAASK,SAAUf,EAAY,WAAa,KAAMoB,KAAK,QAAQJ,IAAI,IAAIC,IAAI,QAIpL,4BAAQH,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,YAAYK,QAAUvB,EAC9C,KADwD,WACpF,OAAOM,MADZ,sBAGC,4BAAQQ,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,iBAAiBK,QAAUvB,EACrD,KAD+D,WAC1F,OAD+F,EAAKE,SAAS,CAACF,WAAU,IACjHI,MADX,eAGD,4BAAQU,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,oBAAoBK,QAAUvB,EACnD,KAD6D,WAC5F,OADiG,EAAKE,SAAS,CAACF,WAAU,IACnHK,MADZ,kBAGA,4BAAQS,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,oBAAoBK,QAAUvB,EACvD,KADiE,WAC5F,OADiG,EAAKE,SAAS,CAACF,WAAU,IACnHG,MADZ,iBAGA,4BAAQW,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,gBAAgBK,QAAUvB,EACnD,KAD6D,WACxF,OAD6F,EAAKE,SAAS,CAACF,WAAU,IAC/GO,MADZ,cAGA,4BAAQO,MAAO,CAACQ,gBAAgBb,EAAMC,OAAOA,GAASQ,GAAG,gBAAgBK,QAAUvB,EACpD,KAD8D,WACzF,OAD8F,EAAKE,SAAS,CAACF,WAAU,IAChHQ,MADX,mB,GA7CyBgB,cCslBpC,SAASC,EAAaT,EAAKC,GAGxB,OAFCD,EAAMpC,KAAK8C,KAAKV,GAChBC,EAAMrC,KAAKC,MAAMoC,GACXrC,KAAKC,MAAMD,KAAK+C,UAAYV,EAAMD,EAAM,IAAMA,EAG1CY,M,kDAnlBX,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IAoBV+B,WAAW,WAGP,IAFA,IAOIC,EAPEvC,EAAM,GACPwC,EAAY,EAAKhC,MAAjBgC,WACG/C,EAAE,EAAEA,GAAG+C,EAAW/C,IACtBO,EAAMF,KAAKoC,EAAa,EAAE,MAM1BK,EADDC,GAAY,KAAOA,GAAY,IACxB,EAEFA,GAAY,KAAOA,EAAW,IAC5B,GAEFA,GAAY,IAAMA,EAAW,IAC3B,GAEFA,GAAY,IAAMA,EAAW,GAC3B,GAEFA,GAAY,IAAMA,EAAW,GAC3B,GAGA,GAGV,EAAK7B,SAAS,CACVX,MAAMA,EACNuC,MAAMA,IAKV,IAFA,IAAIE,EAAUC,SAASC,uBAAuB,aAEtClD,EAAE,EAAEA,EAAEgD,EAAUG,OAAOnD,IAC3BgD,EAAUhD,GAAG8B,MAAMQ,gBAAgB,QAzDxB,EAgEnBc,UAAU,WAENH,SAASI,eAAe,uBAAuBC,UAAU,iBAF/C,MAMHC,EAAO,EAAKxC,MAAZwC,MAOHC,ECzFY,SAACjD,GAOjB,IANA,IAAIkD,EAAMlD,EAAM4C,OAAO,EACnBzD,EAAU,GACVgE,EAAO,GACPC,GAAS,EACTC,EAAQ,GAEK,IAAXD,GAAiB,CAEnBA,GAAS,EACT,IAAK,IAAI1D,EAAI,EAAGA,EAAIwD,EAAIG,EAAS3D,IAAK,CAElC,IAAIC,EAAgB,GAIpB,GAHAA,EAAgBC,YAAY,CAACF,EAAEA,EAAE,GAG7BM,EAAMN,GAAKM,EAAMN,EAAI,GAAI,CAEzB0D,GAAS,EAETzD,EAAgBE,KAAK,CAACH,EAAEA,EAAE,GAC1B,IAAI4D,EAAMtD,EAAMN,GAChBM,EAAMN,GAAKM,EAAMN,EAAI,GACrBM,EAAMN,EAAI,GAAK4D,OAMf3D,EAAgBE,KAAK,CAACH,EAAE,EAAEA,EAAE,GAGhCP,EAAUW,KAAKH,GAGnBwD,EAAOrD,KAAKoD,EAAIG,GAEhBA,GAAS,EAGb,MAAO,CAAClE,EAAUgE,GDiDLI,CAAW,EAAK/C,MAAMR,OAC/Bb,EAAU8D,EAAS,GACnBE,EAAOF,EAAS,GAGhBO,EAAa,GACbhE,EAAE,EAnBI,cAyBQL,GAzBR,IAyBV,IAAI,EAAJ,qBAA4B,CAAC,IAAnBsE,EAAkB,QACxBD,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK5D,OA5BjB,8BAkCV,IAlCU,eAkCFJ,GAlCE,kBAmCuB+D,EAAa/D,GAnCpC,GAmCCiE,EAnCD,KAmCYC,EAnCZ,KAoCFlB,EAAUC,SAASC,uBAAuB,aAC1CiB,EAAUnB,EAAUiB,GAAWnC,MAC/BsC,EAAUpB,EAAUkB,GAAWpC,MASnC,GADmB9B,EAAE,IAAI,EACN,CAGf,IAAIyB,EAAMzB,EAAE,IAAI,EAAI,MAAQ,OAG5BqE,YAAW,WACPF,EAAU7B,gBAAgBb,EAC1B2C,EAAU9B,gBAAgBb,KAC1BzB,EAAE,IAAIuD,QAMVc,YAAW,WAGJH,IAAYR,EAAO3D,KAClBA,IACAiD,EAAUkB,GAAWpC,MAAMQ,gBAAgB,SAI/C,IAAIgC,EAAWF,EAAUG,OACzBH,EAAUG,OAAOJ,EAAUI,OAC3BJ,EAAUI,OAAOD,EAQdtE,IAAK+D,EAAaZ,OAAO,GAAI,WAE5B,IADA,IAAIqB,EAAIvB,SAASC,uBAAuB,aADb,WAEnBlD,GACJqE,YAAW,WACPG,EAAIxE,GAAG8B,MAAMQ,gBAAgB,WAC9BtC,EAAE,IAAIuD,IAHLvD,EAAEkE,EAAUlE,GAAG,EAAEA,IAAK,EAAtBA,GAFoB,GAW7BA,IAAI+D,EAAaZ,OAAO,GACvBkB,YAAW,WAEPpB,SAASI,eAAe,uBAAuBC,UAAU,GACzD,EAAKpC,SAAS,CAACF,WAAU,MAC3B,QAGPhB,EAAE,IAAIuD,IAlETvD,EAAE,EAAEA,EAAE+D,EAAaZ,OAAOnD,IAAK,EAA/BA,IAlGO,EA+KnByE,cAAc,WAEVxB,SAASI,eAAe,uBAAuBC,UAAU,oBAF3C,MAMPC,EAAO,EAAKxC,MAAZwC,MAEHmB,EEnMe,SAACnE,GAMxB,IAJA,IAAIb,EAAU,GACVU,EAAK,GAGDJ,EAAE,EAAEA,EAAEO,EAAM4C,OAAOnD,IAAI,CAE3B,IADA,IAAI2E,EAAO3E,EACHC,EAAED,EAAE,EAAEC,EAAEM,EAAM4C,OAAOlD,IAAI,CAG7B,IAAIC,EAAgB,GACpBA,EAAgB0E,YAAY3E,EAEzBM,EAAMN,GAAGM,EAAMoE,IACdA,EAAO1E,EAGPC,EAAgB2E,QAAQF,GAIxBzE,EAAgB2E,QAAQF,EAG5BjF,EAAUW,KAAKH,GAInBE,EAAKC,KAAK,CAACL,EAAE2E,IACb,IAAI/D,EAAKL,EAAMP,GACfO,EAAMP,GAAGO,EAAMoE,GACfpE,EAAMoE,GAAQ/D,EAGlB,MAAO,CAAClB,EAAUU,GFgKKqE,CAAc,EAAK1D,MAAMR,OACxCb,EAAUgF,EAAe,GACzBtE,EAAKsE,EAAe,GAKpBX,EAAa,GACbc,EAAQ,GACR9E,EAAE,EAjBQ,cAqBEL,GArBF,IAqBd,IAAI,EAAJ,qBAA0B,CAAC,IAAnBsE,EAAkB,QACtBD,EAAa1D,KAAK2D,EAAKY,aACvBb,EAAa1D,KAAK2D,EAAKY,aAEvBC,EAAQxE,KAAK2D,EAAKa,SAClBA,EAAQxE,KAAK2D,EAAKa,UA1BR,8BA8BlBA,EAAQxE,KAAKwE,EAAQA,EAAQ1B,OAAO,IAGhC,IAjCc,eAiCNnD,GACJ,IAAMiE,EAAUF,EAAa/D,GACvB8E,EAAgBD,EAAQ7E,GAG1BgD,EAAUC,SAASC,uBAAuB,aAC1CiB,EAAUnB,EAAUiB,GAAWnC,MAC/BiD,EAAgB/B,EAAU8B,GAAiBhD,MAGlCkB,EAAU,GAAGlB,MAAMQ,gBAAgB,SAMhD,GAHmB2B,IAAYjB,EAAUG,OAAO,EAG7B,CAIf,IAAI1B,EAAMzB,EAAE,IAAI,EAAI,MAAQ,OAExBgF,EAAYH,EAAQ7E,KAAK6E,EAAQ7E,EAAE,GAAI,QAAQ,OAInDqE,YAAW,WACPF,EAAU7B,gBAAgBb,EAC1BsD,EAAgBzC,gBAAgB0C,EAChChC,EAAUjD,GAAG+B,MAAMQ,gBAAgB,YAEnCtC,EAAE,IAAIuD,OAIV,CAEA,GAAGvD,EAAE,IAAI,EACL,iBAEJqE,YAAW,WAAI,kBAEajE,EAAKL,GAFlB,GAENkF,EAFM,KAEGC,EAFH,KAGXnF,IAEAiD,EAAUjD,GAAG+B,MAAMQ,gBAAgB,SAGnC,IAAI6C,EAAcnC,EAAUiC,GAAUnD,MAClCsD,EAAcpC,EAAUkC,GAAUpD,MAClCwC,EAAWc,EAAcb,OAC7Ba,EAAcb,OAAOY,EAAcZ,OACnCY,EAAcZ,OAAOD,EAErBS,EAAgBzC,gBAAgB,OAChC6C,EAAc7C,gBAAgB,QAI3BvC,IAAIK,EAAK+C,OAAO,IACfiC,EAAc9C,gBAAgB,QAE9BU,EAAUjD,GAAG+B,MAAMQ,gBAAgB,SAIpCtC,IAAI+D,EAAaZ,OAAO,GACvBkB,YAAW,WAEPpB,SAASI,eAAe,uBAAuBC,UAAU,GACzD,EAAKpC,SAAS,CAACF,WAAU,MAC3B,QAEPhB,EAAE,IAAIuD,KAzETvD,EAAE,EAAEA,EAAE+D,EAAaZ,OAAOnD,IAAI,EAA9BA,IAhNO,EAgSnBqF,cAAc,WAGVpC,SAASI,eAAe,uBAAuBC,UAAU,oBAH3C,MAQPC,EAAO,EAAKxC,MAAZwC,MAGH7D,EGvTe,SAACa,GAI5B,IAFI,IAAIb,EAAU,GAEVM,EAAE,EAAEA,EAAEO,EAAM4C,OAAOnD,IAAI,CAC3B,IAAIE,EAAgB,GAChBD,EAAED,EAWN,IAPGC,EAAE,GAAKM,EAAMN,IAAIM,EAAMN,EAAE,KACxBC,EAAgBC,YAAY,CAACF,EAAEA,EAAE,GACjCC,EAAgBE,KAAK,CAACH,EAAEA,GACxBP,EAAUW,KAAKH,IAIbD,EAAE,GAAKM,EAAMN,GAAGM,EAAMN,EAAE,IAAG,EAE7BC,EAAgB,IACAC,YAAY,CAACF,EAAEA,EAAE,GACjCC,EAAgBE,KAAK,CAACH,EAAEA,EAAE,GAE1B,IAAIW,EAAKL,EAAMN,EAAE,GACjBM,EAAMN,EAAE,GAAGM,EAAMN,GACjBM,EAAMN,GAAGW,EACTlB,EAAUW,KAAKH,GACfD,GAAG,GAIX,OAAOP,EHwRe2F,CAAc,EAAKtE,MAAMR,OAKnCwD,EAAa,GAhBH,cAiBGrE,GAjBH,IAiBd,IAAI,EAAJ,qBAA2B,CAAC,IAApBsE,EAAmB,QAEvBD,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK5D,OArBb,8BAyBd,IAzBc,eAyBNJ,GAzBM,kBA0BM+D,EAAa/D,GA1BnB,GA0BLsF,EA1BK,KA0BAC,EA1BA,KA2BNvC,EAAUC,SAASC,uBAAuB,aAC1CsC,EAAexC,EAAUsC,GAAMxD,MAC/B2D,EAAezC,EAAUuC,GAAMzD,MAKnC,GAFmB9B,EAAE,IAAI,EAEP,CAEf,IAAKyB,EAAOzB,EAAE,IAAK,EAAE,MAAM,OAE9BqE,YAAW,WACPmB,EAAelD,gBAAgBb,EAC/BgE,EAAenD,gBAAgBb,KAChCzB,EAAE,IAAIuD,QAKLc,YAAW,WAEP,IAAIzD,EAAK4E,EAAejB,OAOxB,GANAiB,EAAejB,OAAOkB,EAAelB,OACrCkB,EAAelB,OAAO3D,GAKT,KAHLZ,IAAI+D,EAAaZ,OAAO,GAI5B,IADe,IAAD,WACNnD,GACJ,IACI0F,EADUzC,SAASC,uBAAuB,aAClBlD,GAAG8B,MAC/BuC,YAAW,WACPqB,EAAcpD,gBAAgB,UAC9B,GAAFtC,IALEA,EAAE,EAAEA,EAAE,EAAKe,MAAMR,MAAM4C,OAAOnD,IAAK,EAAnCA,GAUTA,IAAI+D,EAAaZ,OAAO,GACvBkB,YAAW,WAEPpB,SAASI,eAAe,uBAAuBC,UAAU,GACzD,EAAKpC,SAAS,CAACF,WAAU,MACxB,QAIVhB,EAAE,IAAIuD,IAlDTvD,EAAE,EAAEA,EAAE+D,EAAaZ,OAAOnD,IAAK,EAA/BA,IAzTO,EAsXvB2F,UAAU,WAGN1C,SAASI,eAAe,uBAAuBC,UAAU,gBAH/C,MAOHC,EAAO,EAAKxC,MAAZwC,MAGH7D,EH5Ye,SAACa,GACpB,IAAMb,EAAU,GAEhB,KAAGa,EAAM4C,QAAQ,GAAjB,CAGA,IAAI1D,EAAcc,EAAMqF,QAExB,OADAvG,EAAgBkB,EAAM,EAAEA,EAAM4C,OAAO,EAAE1D,EAAcC,GAC9CA,GGoYOiG,CAAU,EAAK5E,MAAMR,OAK/BwD,EAAa,GAfP,cAgBMrE,GAhBN,IAgBV,IAAI,EAAJ,qBAA0B,CAAC,IAAnBsE,EAAkB,QACtBD,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK7D,aACvB4D,EAAa1D,KAAK2D,EAAK5D,OAnBjB,8BAuBV,IAvBU,eAuBFJ,GAvBE,kBAwBuB+D,EAAa/D,GAxBpC,GAwBE6F,EAxBF,KAwBYC,EAxBZ,KAyBD9C,EAAUC,SAASC,uBAAuB,aAM9C,GAHoBlD,EAAE,IAAK,EAGT,CACd,IAAIyB,EAAOzB,EAAE,IAAK,EAAE,MAAM,OACtB+F,EAAU/C,EAAU6C,GAAW/D,MAC/BkE,EAAUhD,EAAU8C,GAAWhE,MAEpCuC,YAAW,WACP0B,EAAUzD,gBAAgBb,EAC1BuE,EAAU1D,gBAAgBb,KAC3BzB,EAAE,IAAIuD,QAKTc,YAAW,WAAI,kBAEgBN,EAAa/D,GAF7B,GAEL6F,EAFK,KAEKI,EAFL,KAQX,GAJajD,EAAU6C,GAAW/D,MACzByC,OAAT,UAAmB0B,EAAnB,MAGIjG,IAAK+D,EAAaZ,OAAO,EACzB,IAD6B,IAAD,WACpBnD,GACJ,IACI0F,EADUzC,SAASC,uBAAuB,aAClBlD,GAAG8B,MAC/BuC,YAAW,WACPqB,EAAcpD,gBAAgB,UAC9B,GAAFtC,IALEA,EAAE,EAAEA,EAAE,EAAKe,MAAMR,MAAM4C,OAAOnD,IAAK,EAAnCA,GAUTA,IAAI+D,EAAaZ,OAAO,GACvBkB,YAAW,WAEPpB,SAASI,eAAe,uBAAuBC,UAAU,GACzD,EAAKpC,SAAS,CAACF,WAAU,MACxB,QAGVhB,EAAE,IAAIuD,IAhDTvD,EAAE,EAAEA,EAAE+D,EAAaZ,OAAOnD,IAAK,EAA/BA,IA7YW,EAycvBkG,UAAU,WAGNjD,SAASI,eAAe,uBAAuBC,UAAU,gBASzD,IANA,IAAI5D,EF3de,SAACa,GACpB,KAAGA,EAAM4C,QAAQ,GAAjB,CAIA,IAAI3C,EAAW,GAGf,OAFAF,EAAgBC,EAAM,EAAEA,EAAM4C,OAAO,EAAE3C,GAEhCA,GEmdO2F,CAAU,EAAKpF,MAAMR,OAG5BgD,EAAO,EAAKxC,MAAZwC,MATG,WAYFvD,GAMJ,GAHmBA,EAAE,IAAK,EAGT,CAAC,IAAD,cACwBN,EAAUM,GADlC,GACR6F,EADQ,KACEC,EADF,KACYM,EADZ,KAGTL,EAAU9C,SAASC,uBAAuB,aAAa2C,GAAW/D,MAClEkE,EAAU/C,SAASC,uBAAuB,aAAa4C,GAAWhE,MAClEuE,EAAWpD,SAASC,uBAAuB,aAAakD,GAAYtE,MAGpEL,EAAOzB,EAAE,IAAI,EAAG,MAAM,OAE1BqE,YAAW,WAEPgC,EAAW/D,gBAAgB,SAC3ByD,EAAUzD,gBAAgBb,EAC1BuE,EAAU1D,gBAAgBb,KAC3BzB,EAAE,IAAIuD,OAIT,mBAE0B7D,EAAUM,GAFpC,GAEK6F,EAFL,KAEeC,EAFf,KAGIC,EAAU9C,SAASC,uBAAuB,aAAa2C,GAAW/D,MAClEkE,EAAU/C,SAASC,uBAAuB,aAAa4C,GAAWhE,MAEtEuC,YAAW,WAEP,IAAIzD,EAAKmF,EAAUxB,OAKnB,GAJAwB,EAAUxB,OAAOyB,EAAUzB,OAC3ByB,EAAUzB,OAAO3D,EAGbZ,IAAKN,EAAUyD,OAAO,EACtB,IAD0B,IAAD,WACjBnD,GACJ,IACI0F,EADUzC,SAASC,uBAAuB,aAClBlD,GAAG8B,MAC/BuC,YAAW,WACPqB,EAAcpD,gBAAgB,UAC9B,GAAFtC,IALEA,EAAE,EAAEA,EAAE,EAAKe,MAAMR,MAAM4C,OAAOnD,IAAK,EAAnCA,GAUTA,IAAIN,EAAUyD,OAAO,GACpBkB,YAAW,WAEPpB,SAASI,eAAe,uBAAuBC,UAAU,GACzD,EAAKpC,SAAS,CAACF,WAAU,MACvB,QAGXhB,EAAE,IAAIuD,KAzDTvD,EAAE,EAAEA,EAAEN,EAAUyD,OAAOnD,IAAK,EAA5BA,IArdW,EA2hBvBsG,gBAAgB,SAACC,GACb,EAAKrF,SAAS,CAAC6B,WAAWwD,EAAEC,OAAOC,QACnC,EAAK5D,cA7hBc,EAiiBvB6D,aAAa,SAACH,GACV,EAAKrF,SAAS,CAACqC,MAAMgD,EAAEC,OAAOC,SA/hB1B,EAAK1F,MAAQ,CACRR,MAAM,GAGNS,WAAU,EACV8B,MAAM,EACNC,WAAW,IACXQ,MAAM,GAVI,E,iEAgBftC,KAAK4B,e,+BAuhBC,IAAD,EAEe5B,KAAKF,MAAlBR,EAFF,EAEEA,MAAMuC,EAFR,EAEQA,MACb,OACI,oCACA,yBAAK6D,UAAU,kBAEVpG,EAAMqG,KAAI,SAACH,EAAMI,GACd,OACA,yBAAMF,UAAU,YAAW7E,MAAO,CAACyC,OAAO,GAAD,OAAIkC,EAAJ,MAAc3D,MAAM,GAAD,OAAIA,EAAJ,OAAgBgE,IAAKD,QAMzF,yBAAK3E,GAAG,WACJ,kBAAC,EAAD,CAASlB,UAAWC,KAAKF,MAAMC,UAAWG,iBAAkBF,KAAKoE,cACvDjE,iBAAkBH,KAAKmC,UACvB/B,qBAAsBJ,KAAKwD,cAC3BnD,kBAAmBL,KAAK4B,WACxBtB,iBAAkBN,KAAK0E,UACvBnE,iBAAkBP,KAAKiF,UACvBrE,OAAQZ,KAAKqF,gBACbjE,MAAOpB,KAAKyF,eAEZ,0BAAMxE,GAAG,uBAAT,Y,GAjkBOM,aIElBuE,MAVf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCKYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtE,SAASI,eAAe,SDyHpB,kBAAmBmE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.130d1075.chunk.js","sourcesContent":["export const mergeSort=(array)=>{\r\n    const animation=[]\r\n\r\n    if(array.length<=1){\r\n        return\r\n    }\r\n    let axiliaryArray=array.slice()\r\n    mergeSortHelper(array,0,array.length-1,axiliaryArray,animation)\r\n    return animation\r\n}\r\n\r\nconst mergeSortHelper=(mainArray,startIdx,endIdx,axiliaryArray,animation)=>{\r\n    if(startIdx===endIdx){\r\n        return\r\n    }\r\n    let midIdx=Math.floor((startIdx+endIdx)/2)\r\n    mergeSortHelper(axiliaryArray,startIdx,midIdx,mainArray,animation)\r\n    mergeSortHelper(axiliaryArray,midIdx+1,endIdx,mainArray,animation)\r\n    doMerge(mainArray,startIdx,midIdx,endIdx,axiliaryArray,animation)\r\n\r\n}\r\n\r\nconst doMerge=(mainArray,startIdx,midIdx,endIdx,axiliaryArray,animation)=>{\r\n     let k=startIdx\r\n     let i=startIdx\r\n     let j=midIdx+1\r\n\r\n     while(i<=midIdx  && j<=endIdx){\r\n         const animationobject={}\r\n         //pushing comparision and swap values to animation object\r\n\r\n         animationobject.comparision=[i,j]\r\n\r\n         if(axiliaryArray[i]<=axiliaryArray[j]){\r\n             //push overwritting values\r\n             animationobject.swap=[k,axiliaryArray[i]]\r\n\r\n             mainArray[k]=axiliaryArray[i]\r\n             i++\r\n         }\r\n         else{\r\n\r\n             mainArray[k]=axiliaryArray[j]\r\n             //push overwritting values\r\n             animationobject.swap=[k,axiliaryArray[j]]\r\n             j++\r\n         }\r\n         animation.push(animationobject)\r\n         k++\r\n     }\r\n\r\n     //remaining values on first half\r\n     while(i<=midIdx){\r\n        //push overwritting values and comparision values\r\n         animation.push({comparision:[i,i],\r\n                        swap:[k,axiliaryArray[i]]\r\n                    })\r\n         mainArray[k]=axiliaryArray[i]\r\n         i++\r\n         k++\r\n     }\r\n\r\n     //remaining value in second half\r\n     while(j<=endIdx){\r\n               //push overwritting values and comparision values\r\n        animation.push({comparision:[j,j],\r\n                        swap:[k,axiliaryArray[j]]})\r\n        mainArray[k]=axiliaryArray[j]\r\n        j++\r\n        k++\r\n    }\r\n\r\n\r\n}","export const QuickSort=(array)=>{\r\n    if(array.length<=1){\r\n        return\r\n    }\r\n    //animation array\r\n    let animations=[]\r\n    QuickSortHelper(array,0,array.length-1,animations)\r\n    //the function will return animation array\r\n    return animations\r\n}\r\n\r\nconst QuickSortHelper=(array,startIdx,endIdx,animations)=>{\r\n    //base case \r\n    if(startIdx>=endIdx){\r\n        return\r\n    }\r\n    let pivotIdx=startIdx\r\n    let leftIdx=startIdx+1\r\n    let rightIdx=endIdx\r\n\r\n\r\n    while(leftIdx<=rightIdx){\r\n        //pushing the comparision value twice to deal with the color change to the animation array\r\n            animations.push([leftIdx,rightIdx,pivotIdx])\r\n            animations.push([leftIdx,rightIdx,pivotIdx])\r\n\r\n        if(array[leftIdx]>array[pivotIdx] && array[rightIdx]<array[pivotIdx]){\r\n            //push the swap index to animations array\r\n            animations.push([leftIdx,rightIdx])\r\n            swap(array,leftIdx,rightIdx)\r\n        }\r\n        else{\r\n            //if there is no swap simply push the same value\r\n            animations.push([leftIdx,leftIdx])\r\n        }\r\n        \r\n        //pointer increment condition\r\n        if(array[leftIdx]<=array[pivotIdx]){\r\n            leftIdx++\r\n        }\r\n\r\n        if(array[rightIdx]>=array[pivotIdx]){\r\n            rightIdx--\r\n        }\r\n    }\r\n\r\n    //pushing comaprision array(twice) with pivot index and swap arry once to the animation array\r\n    animations.push([pivotIdx,rightIdx,pivotIdx])\r\n    animations.push([pivotIdx,rightIdx,pivotIdx])  \r\n    animations.push([pivotIdx,rightIdx])  \r\n    //swapping pivot and right index    \r\n    swap(array,pivotIdx,rightIdx)\r\n\r\n    //finding which sub array is smaller\r\n    let leftUSubarrayisSmaller=((rightIdx-1)-startIdx)<(endIdx-(rightIdx+1))\r\n\r\n    if(leftUSubarrayisSmaller){\r\n        QuickSortHelper(array,startIdx,rightIdx-1,animations)\r\n        QuickSortHelper(array,rightIdx+1,endIdx,animations)\r\n    }\r\n    else{\r\n        QuickSortHelper(array,rightIdx+1,endIdx,animations) \r\n        QuickSortHelper(array,startIdx,rightIdx-1,animations)             \r\n    }\r\n\r\n}\r\n\r\n\r\n//swap logic\r\nconst swap=(array,i,j)=>{\r\n    let temp=array[i]\r\n    array[i]=array[j]\r\n    array[j]=temp\r\n}","import React, { Component } from 'react';\r\nimport './Styling/Buttons.css'\r\n\r\nexport default class Buttons extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             isrunning:false\r\n        }\r\n    }\r\n    //recieving state props from parent and updating the state value\r\n    componentWillReceiveProps(props) {\r\n        this.setState({ isrunning: props.isrunning })\r\n      }\r\n    \r\n    render() {\r\n        //recieving all the props sent by parent\r\n       let {isrunning}=this.state\r\n       let {InsertionHandler,bubleSortHandler,selectionSortHandler,resetArrayHandler,mergeSortHandler,quickSortHandler}=this.props\r\n\r\n\r\n       let color=isrunning?'red':'green '\r\n       let cursor=!isrunning?'pointer':'auto'\r\n        return (\r\n            <>\r\n            {/* range input element for ArraySize */}\r\n            <span>Array Size:</span><input step=\"1\" onChange={this.props.action} style={{cursor:cursor}} disabled={isrunning ? \"disabled\" : null} min=\"5\" max=\"150\" id=\"changesize\" defaultValue=\"150\" type=\"range\"></input>\r\n            \r\n            <span>Delay</span><input step=\"1\" id=\"speed\" defaultValue=\"5\" onChange={this.props.speed} style={{cursor:cursor}} disabled={isrunning ? \"disabled\" : null} type=\"range\" min=\"1\" max=\"100\"></input>\r\n\r\n            {/* calling the handler function based on the is running value\r\n            isrunning becomes true after each onClick,if it is true onclick acts as null(ternery) */}\r\n            <button style={{backgroundColor:color,cursor:cursor}} id=\"reset-btn\" onClick={!isrunning?()=>{\r\n                 return resetArrayHandler()}:null}>GENERATE NEW ARRAY</button>\r\n\r\n             <button style={{backgroundColor:color,cursor:cursor}} id=\"bubblesort-btn\" onClick={!isrunning?()=>{this.setState({isrunning:true})\r\n                 return bubleSortHandler()}:null}>BUBBLE SORT</button>  \r\n\r\n            <button style={{backgroundColor:color,cursor:cursor}} id=\"selectionsort-btn\" onClick={!isrunning?()=>{this.setState({isrunning:true})\r\n                 return selectionSortHandler()}:null}>SELECTION SORT</button>\r\n\r\n            <button style={{backgroundColor:color,cursor:cursor}} id=\"insertionsort-btn\" onClick={!isrunning?()=>{this.setState({isrunning:true})\r\n                 return InsertionHandler()}:null}>INSETION SORT</button>\r\n\r\n            <button style={{backgroundColor:color,cursor:cursor}} id=\"mergesort-btn\" onClick={!isrunning?()=>{this.setState({isrunning:true})\r\n                 return mergeSortHandler()}:null}>MERGE SORT</button> \r\n\r\n            <button style={{backgroundColor:color,cursor:cursor}} id=\"mergesort-btn\" onClick={!isrunning?()=>{this.setState({isrunning:true}) \r\n                return quickSortHandler()}:null}>QUICK SORT</button> \r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Styling/SortingVisualizer.css';\r\nimport { bubbleSort } from './Algorithms/Bubble.js';\r\nimport {selectionSort} from './Algorithms/Selection.js';\r\nimport {insertionSort} from './Algorithms/InsertionSort.js';\r\nimport {mergeSort} from './Algorithms/MergeSort';\r\nimport {QuickSort} from './Algorithms/QuickSort';\r\nimport Buttons from './Buttons'\r\n\r\n//-----change size of array here\r\n\r\n class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n   \r\n        this.state = {\r\n             array:[],\r\n             //isrunning  state to pass to the child element Buttons\r\n             //is running corresponds to whether the animation is running or not\r\n             isrunning:false,\r\n             width:5,\r\n             ARRAY_SIZE:150,\r\n             SPEED:5,\r\n        }\r\n    }\r\n\r\n//-------reset the array before rendering it--------\r\n    componentWillMount(){\r\n        this.resetArray()\r\n    }\r\n\r\n\r\n//--------------reset array function pushes 150 random values to the array between the range 5,600--------\r\n    resetArray=()=>{\r\n        const array=[]\r\n        let {ARRAY_SIZE}=this.state\r\n        for(let i=0;i<=ARRAY_SIZE;i++){\r\n            array.push(getRandomInt(5,600));\r\n        }\r\n\r\n        //width of bar\r\n        let width\r\n        if(ARRAY_SIZE>=125 && ARRAY_SIZE<=150){\r\n            width=8\r\n        }\r\n        else if(ARRAY_SIZE>=100 && ARRAY_SIZE<125){\r\n            width=10\r\n        }\r\n        else if(ARRAY_SIZE>=50 && ARRAY_SIZE<100){\r\n            width=12\r\n        }\r\n        else if(ARRAY_SIZE>=25 && ARRAY_SIZE<50){\r\n            width=16\r\n        }\r\n        else if(ARRAY_SIZE>=15 && ARRAY_SIZE<25){\r\n            width=20\r\n        }\r\n        else {\r\n            width=30\r\n        }\r\n\r\n        this.setState({\r\n            array:array,\r\n            width:width\r\n        })\r\n      \r\n        let arrayBars=document.getElementsByClassName('array-bar');\r\n        //--reset the color of bars to blue each time when reset is called--\r\n        for(let i=0;i<arrayBars.length;i++){\r\n            arrayBars[i].style.backgroundColor='blue'\r\n        }\r\n        }\r\n\r\n//---------------------------------------------------BUBBLE SORT-----------------------------------------------------------\r\n\r\n    //-----------bubble sort function which recieves the animation from the Bubble.js-----------\r\n    bubleSort=()=>{\r\n        //setting current sort label\r\n        document.getElementById(\"currentsortinglabel\").innerHTML=\"BUBBLE SORT...\"\r\n\r\n        //--setting up the speed of sorting\r\n        //const SPEED=1\r\n        const {SPEED}=this.state\r\n\r\n    \r\n        //--recieves animation array of objects which consist of array of compared value and array of swapped values\r\n        //eg: animation=[{ comparision:[a,b], swapped:[a:b] }]\r\n        //--recieves sorted numbers array more preciesly the values which are sorted on right side\r\n        //eg: sorted=[149,148.......] bar numbers\r\n        let recieved=bubbleSort(this.state.array)\r\n        let animation=recieved[0]\r\n        let sorted=recieved[1]\r\n\r\n        //--declaring a new animation array inorder to deal with color change\r\n        let newAnimation=[]\r\n        let k=0\r\n\r\n        /*--Here we are traversing through animation array and pushing the animation.comparision twice \r\n        one to turn the bars to red color and another to turn it to blue color back\r\n        and animation.swap array once\r\n        and whenever there is a swap we are swapping the heights*/\r\n        for(const anim of animation){\r\n            newAnimation.push(anim.comparision)\r\n            newAnimation.push(anim.comparision)\r\n            newAnimation.push(anim.swap)\r\n        }\r\n\r\n        /*1--traversing through the newAnimation array\r\n        2---and distructuring array values as bar1index and bar2index \r\n        3--4--5--grabbing the arraybars from DOM, setting up the style attribute for both the array bars*/\r\n        for(let i=0;i<newAnimation.length;i++){\r\n            const [bar1index, bar2index]=newAnimation[i];\r\n            let arrayBars=document.getElementsByClassName('array-bar');\r\n            let bar1style=arrayBars[bar1index].style;\r\n            let bar2style=arrayBars[bar2index].style;\r\n\r\n            /*---setting up the color change variable and color change becomes true [0,1,2..],\r\n            -> 0%3!=2 TRUE\r\n            -> 1%3!=2 TRUE\r\n            -> 2%3!=2 FALSE\r\n            ->That means there is a color change for first two values(array) that is from red to blue\r\n             */\r\n            let is_colorchange=i%3!==2;\r\n            if (is_colorchange){\r\n                //-- for 0 index 0%3==0 means red(blue to red) both the bars\r\n                //-- for 1 index 1%3==0(FALSE) turn the same bars to blue back \r\n                let color=i%3===0 ? 'red' : 'blue';\r\n\r\n                //--changiing the color of both the bars from blue to red ,red to blue back\r\n                setTimeout(()=>{\r\n                    bar1style.backgroundColor=color;\r\n                    bar2style.backgroundColor=color;\r\n                 },(i+15)*SPEED)\r\n            }\r\n\r\n            //--if no color change then we need to swap the heights of bar--\r\n            else {\r\n\r\n                setTimeout(()=> {    \r\n                    //--color the sorted bars to green by using sorted array\r\n                    //--if one full cycle is completed then weneed to set it to green     \r\n                    if(bar2index===sorted[k]){\r\n                        k++\r\n                        arrayBars[bar2index].style.backgroundColor='green';\r\n                    }\r\n\r\n                    //--swap the heights of bars\r\n                    let tempheight=bar2style.height\r\n                    bar2style.height=bar1style.height\r\n                    bar1style.height=tempheight\r\n                    \r\n                    //--coloring the left most bar which remains after sorting to green\r\n                    // if(k===sorted.length){\r\n                    //     arrayBars[bar2index-1].style.backgroundColor='green';\r\n                    // }\r\n\r\n                    //after completion of sorting coloring all unsorted bar to green \r\n                    if(i===(newAnimation.length-1)){\r\n                        let bar=document.getElementsByClassName('array-bar')\r\n                        for(let i=bar2index;i>=0;i--){\r\n                            setTimeout(()=>{\r\n                                bar[i].style.backgroundColor='green'\r\n                            },(i+15)*SPEED)\r\n                        }\r\n\r\n                    }\r\n\r\n                    //setting isrunning to false inorder to enable the events on button click  after 2s            \r\n                    if(i===newAnimation.length-1){\r\n                        setTimeout(()=>{\r\n                            //removing sorting label\r\n                            document.getElementById(\"currentsortinglabel\").innerHTML=\"\"\r\n                            this.setState({isrunning:false})\r\n                        },2000)\r\n                    }\r\n\r\n                },(i+15)*SPEED) \r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n//------------------------------------------------SELECTION SORT--------------------------------------------------\r\n    //---selection sort function which recieves animation object arrray and swapped value array\r\n    //---animation=[{findminimum,minimum}]\r\n    selectionSort=()=>{\r\n        //setting current sort label\r\n        document.getElementById(\"currentsortinglabel\").innerHTML=\"SELECTION SORT...\"\r\n\r\n        //---change the speed of sorting here\r\n        //const SPEED=2\r\n        const {SPEED}=this.state\r\n\r\n        let recieved_array=selectionSort(this.state.array)\r\n        let animation=recieved_array[0]\r\n        let swap=recieved_array[1]\r\n        \r\n    //---creating a newAnimation array inorder to deal with the color change\r\n    //--k is used to identify the one full cycle (swapping operation after one cycle)\r\n    //--minimum array is to keep track of minimum value \r\n        let newAnimation=[]\r\n        let minimum=[]\r\n        let k=0\r\n\r\n    //--traversing through animation array and pushing finding minimum value twice inorder to deal with the color change(red to blue)\r\n    //--pushing the minimum value to minimum array\r\n        for(let anim of animation){\r\n            newAnimation.push(anim.findminimum)\r\n            newAnimation.push(anim.findminimum)\r\n            //pushing minimum values twice\r\n            minimum.push(anim.minimum)\r\n            minimum.push(anim.minimum)\r\n    }\r\n    //pushing the last value once again inorder to tackle the error(index out f range)\r\n    //cz we ar comparing two value in the loop\r\n    minimum.push(minimum[minimum.length-1])\r\n\r\n    //--trversing through the newAnimation array and grabbing the value which corresponds to bar1 index\r\n        for(let i=0;i<newAnimation.length;i++){\r\n            const bar1index=newAnimation[i]\r\n            const minimunbarindex=minimum[i]\r\n\r\n            //--grabbing the arrayBars from DOM and setting up the style\r\n            let arrayBars=document.getElementsByClassName('array-bar');\r\n            let bar1style=arrayBars[bar1index].style\r\n            let minimumbarstyle=arrayBars[minimunbarindex].style\r\n\r\n            //--setting up the first index bar to yellow \r\n            let firstbar=arrayBars[0].style.backgroundColor='yellow'\r\n\r\n            //--is_colorchange become false ,at the end of each cycle it becomes false and jump into swap section(else block)\r\n            let is_colorchange=bar1index!==arrayBars.length-1;\r\n\r\n\r\n            if (is_colorchange){\r\n\r\n                //for zero th index of newAnimation set the color to red\r\n                //for repeating value(we pushed findminimum twice) set  it back to blue\r\n                let color=i%2===0 ? 'red' : 'blue';\r\n                //if both the index are same then no need to change the color to blue\r\n                let minbarcolor=minimum[i]===minimum[i+1]? 'black':'blue'\r\n\r\n                //--set the color either to red or blue based on the condition\r\n                //setting the minbar color and first index to YELLOW\r\n                setTimeout(()=>{                  \r\n                    bar1style.backgroundColor=color;\r\n                    minimumbarstyle.backgroundColor=minbarcolor\r\n                    arrayBars[k].style.backgroundColor='yellow'\r\n\r\n                 },(i+15)*SPEED)\r\n            }\r\n\r\n\r\n            else{\r\n                //--to skip the repeating value in the array (we pushed twice),to skip multiple swap at once, we are ignoring even index\r\n                if(i%2===0){\r\n                    continue\r\n                }\r\n                setTimeout(()=>{\r\n                    //--grabbing the swap index value from swap array\r\n                    let [swapbar1,swapbar2]=swap[k]\r\n                    k++\r\n                    //--setting the color of first index to yellow after each swap cycle\r\n                    arrayBars[k].style.backgroundColor='yellow'\r\n\r\n                    //--swap logic\r\n                    let swapbar1style=arrayBars[swapbar1].style\r\n                    let swapbar2style=arrayBars[swapbar2].style\r\n                    let tempheight=swapbar2style.height\r\n                    swapbar2style.height=swapbar1style.height\r\n                    swapbar1style.height=tempheight\r\n                    //turning minimumbar back to blue\r\n                    minimumbarstyle.backgroundColor='blue'\r\n                    swapbar1style.backgroundColor='green'\r\n\r\n\r\n                    //--after each cycle setting the sorted bar color to green\r\n                    if(k===swap.length-1){\r\n                        swapbar2style.backgroundColor='green'\r\n                        //for the final bar to covert it to green\r\n                        arrayBars[k].style.backgroundColor='green'\r\n                    }\r\n\r\n                    //setting isrunning to false inorder to enable the events on button click  after 2s            \r\n                    if(i===newAnimation.length-1){\r\n                        setTimeout(()=>{\r\n                            //removing sorting label\r\n                            document.getElementById(\"currentsortinglabel\").innerHTML=\"\"\r\n                            this.setState({isrunning:false})\r\n                        },2000)\r\n                    }\r\n                },(i+15)*SPEED)\r\n                \r\n            }\r\n        }\r\n}\r\n\r\n//----------------------------------------------INSERTION SORT----------------------------------------\r\n    insertionSort=()=>{\r\n\r\n        //setting current sort label\r\n        document.getElementById(\"currentsortinglabel\").innerHTML=\"INSERTION SORT...\"        \r\n\r\n\r\n        //set SPEED of ANIMATION HERE\r\n        //const SPEED=2\r\n        const {SPEED}=this.state\r\n\r\n        // recieved animation array\r\n        let animation=insertionSort(this.state.array)\r\n        //sorted to false to color the graph to green wheneve it becomes true\r\n        let sorted=false\r\n\r\n    //new animation array inorder to deal with the color change     \r\n        let newAnimation=[]\r\n        for(let anim of  animation){\r\n            //pushing comparision array twice to deal with color change from red to blue\r\n            newAnimation.push(anim.comparision)\r\n            newAnimation.push(anim.comparision)\r\n            newAnimation.push(anim.swap)\r\n        }\r\n\r\n        //iterating through newAnimation and setting up the arrayBar style\r\n        for(let i=0;i<newAnimation.length;i++){\r\n            let [bar1,bar2]=newAnimation[i]\r\n            let arrayBars=document.getElementsByClassName(\"array-bar\")\r\n            let arrayBar1Style=arrayBars[bar1].style\r\n            let arrayBar2Style=arrayBars[bar2].style\r\n\r\n            //for index 0,1 there is a color change from red to blue\r\n            let is_colorchange=i%3!==2\r\n\r\n            if(is_colorchange){\r\n                //for 0 setting color to red and for 1 setting color to blue\r\n               let  color=(i%3)===0?'red':'blue';\r\n\r\n            setTimeout(()=>{\r\n                arrayBar1Style.backgroundColor=color\r\n                arrayBar2Style.backgroundColor=color\r\n            },(i+10)*SPEED)\r\n            }\r\n\r\n            //for third value there is no color change ,there is a swap\r\n            else{\r\n                setTimeout(()=>{\r\n                    //swapping the height\r\n                    let temp=arrayBar1Style.height\r\n                    arrayBar1Style.height=arrayBar2Style.height\r\n                    arrayBar2Style.height=temp\r\n                    //when the loop is completed , setting sorted to true\r\n                    sorted=(i===newAnimation.length-1)?true:false\r\n\r\n                    //whenever the array is sortred change the color of entire array back to green\r\n                    if (sorted===true){\r\n                        for(let i=0;i<this.state.array.length;i++){\r\n                            let arrayBars=document.getElementsByClassName('array-bar')\r\n                            let arrayBarstyle=arrayBars[i].style\r\n                            setTimeout(()=>{\r\n                                arrayBarstyle.backgroundColor='green'\r\n                            },i*10)\r\n                        }\r\n                    }\r\n\r\n                 //setting isrunning to false inorder to enable the events on button click\r\n                    if(i===newAnimation.length-1){\r\n                        setTimeout(()=>{\r\n                            //removing sorting label\r\n                            document.getElementById(\"currentsortinglabel\").innerHTML=\"\"\r\n                            this.setState({isrunning:false})\r\n                           },2000)\r\n\r\n                    }\r\n\r\n                },(i+10)*SPEED)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n//-------------------------------------------------MERGE SORT---------------------------------------------------------------\r\n\r\nmergeSort=()=>{\r\n\r\n    //setting current sort label\r\n    document.getElementById(\"currentsortinglabel\").innerHTML=\"MERGE SORT...\"  \r\n\r\n    //SET SPEED OF ANIMATION HERE(ms)\r\n    // let SPEED=5\r\n    const {SPEED}=this.state\r\n\r\n    //calling mergeSort and got animat\r\n    let animation=mergeSort(this.state.array)\r\n\r\n\r\n    //we are pushing comparison array twice to change color from red to blue\r\n    //and swap(overwrite) value once to the array\r\n    let newAnimation=[]\r\n    for(let anim of animation){\r\n        newAnimation.push(anim.comparision)\r\n        newAnimation.push(anim.comparision)\r\n        newAnimation.push(anim.swap)\r\n    }\r\n\r\n    //trversing through the newAnimation and grabbing the bar index\r\n    for(let i=0;i<newAnimation.length;i++){\r\n         const [bar1Index,bar2Index]=newAnimation[i]\r\n         let arrayBars=document.getElementsByClassName('array-bar')\r\n\r\n        //for first two values there is a color change from red to blue\r\n         let is_colorchange=(i%3)!==2\r\n\r\n        //changing the color of comparision bar in dom from red to blue\r\n         if(is_colorchange){\r\n             let color=(i%3)===0?'red':'blue'\r\n             let bar1Style=arrayBars[bar1Index].style\r\n             let bar2Style=arrayBars[bar2Index].style\r\n\r\n            setTimeout(()=>{\r\n                bar1Style.backgroundColor=color\r\n                bar2Style.backgroundColor=color\r\n            },(i+15)*SPEED)\r\n         }\r\n\r\n         else{\r\n\r\n            setTimeout(()=>{\r\n                //grabbing the overwriting bar index \r\n               const [bar1Index,newHeight]=newAnimation[i]\r\n               //overwritting the height\r\n                let barstyle=arrayBars[bar1Index].style\r\n                barstyle.height=`${newHeight}px`\r\n\r\n                //after sorting is completed coloring the bar to green\r\n                if (i===(newAnimation.length-1)){\r\n                    for(let i=0;i<this.state.array.length;i++){\r\n                        let arrayBars=document.getElementsByClassName('array-bar')\r\n                        let arrayBarstyle=arrayBars[i].style\r\n                        setTimeout(()=>{\r\n                            arrayBarstyle.backgroundColor='green'\r\n                        },i*10)\r\n                    }\r\n                }\r\n\r\n                //setting isrunning to false inorder to enable the events on button click  after 2s            \r\n                if(i===newAnimation.length-1){\r\n                    setTimeout(()=>{\r\n                        //removing sorting label\r\n                        document.getElementById(\"currentsortinglabel\").innerHTML=\"\"\r\n                        this.setState({isrunning:false})\r\n                       },2000)\r\n                }\r\n\r\n            },(i+15)*SPEED)\r\n\r\n             \r\n\r\n\r\n\r\n         }\r\n    }\r\n\r\n}\r\n\r\n//-----------------------------------------QUICK SORT-----------------------------------------------------------------\r\nquickSort=()=>{\r\n    \r\n    //setting current sort label\r\n    document.getElementById(\"currentsortinglabel\").innerHTML=\"QUICK SORT...\"  \r\n\r\n    //qucick sort function will return animations\r\n    let animation=QuickSort(this.state.array)\r\n\r\n    //destructuring SPEED from state\r\n    const {SPEED}=this.state\r\n\r\n    //traversing through the animations \r\n    for(let i=0;i<animation.length;i++){\r\n\r\n        //for the first two comparision array we have color change\r\n        let isColorchange=(i%3)!==2\r\n\r\n        //\r\n        if(isColorchange){\r\n            let [bar1Index,bar2Index,pivotIndex]=animation[i]\r\n            //grabbing the index specified bar fro DOM and set the style\r\n            let bar1Style=document.getElementsByClassName(\"array-bar\")[bar1Index].style\r\n            let bar2Style=document.getElementsByClassName(\"array-bar\")[bar2Index].style\r\n            let pivotstyle=document.getElementsByClassName(\"array-bar\")[pivotIndex].style\r\n\r\n            //color transition from red to blue\r\n            let color=(i%3===0)?'red':'blue'\r\n            \r\n            setTimeout(()=>{\r\n                //pivot index value remains yellow\r\n                pivotstyle.backgroundColor='yellow'\r\n                bar1Style.backgroundColor=color\r\n                bar2Style.backgroundColor=color\r\n            },(i+15)*SPEED)\r\n\r\n        }\r\n\r\n        else{\r\n            //if there is no color change we need to swap\r\n            let [bar1Index,bar2Index]=animation[i]\r\n            let bar1Style=document.getElementsByClassName(\"array-bar\")[bar1Index].style\r\n            let bar2Style=document.getElementsByClassName(\"array-bar\")[bar2Index].style\r\n\r\n            setTimeout(()=>{\r\n                //swapping heights\r\n                let temp=bar1Style.height\r\n                bar1Style.height=bar2Style.height\r\n                bar2Style.height=temp\r\n\r\n                //after sorting is completed coloring the bar to green\r\n                if (i===(animation.length-1)){\r\n                    for(let i=0;i<this.state.array.length;i++){\r\n                        let arrayBars=document.getElementsByClassName('array-bar')\r\n                        let arrayBarstyle=arrayBars[i].style\r\n                        setTimeout(()=>{\r\n                            arrayBarstyle.backgroundColor='green'\r\n                        },i*10)\r\n                    }\r\n                }\r\n\r\n                //setting isrunning to false inorder to enable the events on button click  after 2s            \r\n                if(i===animation.length-1){\r\n                    setTimeout(()=>{\r\n                        //removing sorting label\r\n                        document.getElementById(\"currentsortinglabel\").innerHTML=\"\"\r\n                        this.setState({isrunning:false})\r\n                        },2000)\r\n                }\r\n\r\n            },(i+15)*SPEED)\r\n\r\n\r\n    }\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n//------------------------on change handler of child component for changing the size of array which is passed as props---------\r\nonchangeHandler=(e)=>{\r\n    this.setState({ARRAY_SIZE:e.target.value})\r\n    this.resetArray()\r\n}\r\n\r\n//-------------------on change handler for speed of animation-------------------------\r\nspeedHandler=(e)=>{\r\n    this.setState({SPEED:e.target.value})\r\n}\r\n\r\n\r\n//-------------------------------------------------RENDER FUNCTION-----------------------------------------------------------\r\n    render() {\r\n\r\n        const {array,width}=this.state;\r\n        return (\r\n            <>\r\n            <div className=\"body-container\">\r\n               \r\n                {array.map((value,idx)=>{\r\n                    return(\r\n                    <div  className=\"array-bar\"style={{height:`${value}px`,width:`${width}px`}} key={idx}>\r\n  \r\n                    </div>)\r\n                })}\r\n            </div>\r\n                {/* passing the isrunning state and all the click handler to the buttons component as props to handle with disable button*/}\r\n            <div id=\"toolbar\">\r\n                <Buttons isrunning={this.state.isrunning} InsertionHandler={this.insertionSort}\r\n                          bubleSortHandler={this.bubleSort}\r\n                          selectionSortHandler={this.selectionSort}\r\n                          resetArrayHandler={this.resetArray}\r\n                          mergeSortHandler={this.mergeSort}\r\n                          quickSortHandler={this.quickSort}\r\n                          action={this.onchangeHandler}\r\n                          speed={this.speedHandler}>\r\n\r\n                </Buttons><span id=\"currentsortinglabel\">  </span>     \r\n                </div>       \r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//-----------------------GENERATE RANDOM INTEGER FUNCTION--------------\r\n//-----------(REF:STACK OVERFLOW)---------\r\n function getRandomInt(min, max) {\r\n     min = Math.ceil(min);\r\n     max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default SortingVisualizer\r\n","export const bubbleSort=(array)=>{\r\n        let len = array.length-1;\r\n        let animation=[]\r\n        let sorted=[]\r\n        let isSorted=false\r\n        let counter=0\r\n\r\n        while(isSorted!==true) {\r\n            //is sorted is true whenever there there is no swap after one cycle\r\n            isSorted=true\r\n            for (let j = 0; j < len-counter; j++) { \r\n                //---pushing coparision value array to animation object after each comparision\r\n                let animationobject={}\r\n                animationobject.comparision=[j,j+1]\r\n\r\n                //----swap logic----\r\n                if (array[j] > array[j + 1]) {\r\n                    //if thr\r\n                    isSorted=false\r\n                    //---pushing the swap array to animation object\r\n                    animationobject.swap=[j,j+1]\r\n                    let tmp = array[j];\r\n                    array[j] = array[j + 1];\r\n                    array[j + 1] = tmp;\r\n                }\r\n\r\n                //--in case if there is no swap, to tackle the error we are simply setting up the swap between same number \r\n    \r\n                else{\r\n                    animationobject.swap=[j+1,j+1]\r\n                }\r\n                //---pushinng the animation object to animation array\r\n                animation.push(animationobject)\r\n            }\r\n            //-----since the last value is sorted after one cycle we are pushing the index it to sorted array\r\n            sorted.push(len-counter)\r\n            //right most is sorted to skip that iteration \r\n            counter+=1\r\n \r\n        }\r\n        return [animation,sorted];\r\n};\r\n","export const selectionSort=(array)=>{\r\n    //---animation array and swap array inorder to deal with the animation\r\n    let animation=[]\r\n    let swap=[]\r\n\r\n    //---sorting algo\r\n    for(let i=0;i<array.length;i++){\r\n        let minpos=i\r\n        for(let j=i+1;j<array.length;j++){\r\n            //animation object to keep track of findingminimumprocess\r\n\r\n            let animationobject={} \r\n            animationobject.findminimum=j  \r\n\r\n            if(array[j]<array[minpos]){\r\n                minpos=j\r\n\r\n                //---grabbing the minimum value\r\n                animationobject.minimum=minpos\r\n            }\r\n\r\n            else{\r\n                animationobject.minimum=minpos               \r\n            }\r\n            //--pushing animationobject into animation array\r\n            animation.push(animationobject)\r\n        }\r\n        //--pushing the swap values to swap array\r\n        //--swap logic\r\n        swap.push([i,minpos])\r\n        let temp=array[i];\r\n        array[i]=array[minpos]\r\n        array[minpos]=temp \r\n        \r\n    }\r\n    return [animation,swap]\r\n}","export const insertionSort=(array)=>{\r\n    //animation array\r\n    let animation=[]\r\n\r\nfor(let i=0;i<array.length;i++){\r\n    let animationobject={}\r\n    let j=i\r\n\r\n    //if there is no swap only comparision we are pushing the object of comparision to animation array\r\n    //thi is not the part of insertion sort algo\r\n    if(j>0 && array[j]>=array[j-1]){\r\n        animationobject.comparision=[j,j-1]\r\n        animationobject.swap=[j,j]\r\n        animation.push(animationobject)\r\n    }\r\n\r\n    //swpping if true\r\n    while(j>0 && array[j]<array[j-1]){\r\n        //push the comparision value and swap value\r\n        animationobject={}\r\n        animationobject.comparision=[j,j-1]\r\n        animationobject.swap=[j,j-1]\r\n        //swap logic\r\n        let temp=array[j-1]\r\n        array[j-1]=array[j]\r\n        array[j]=temp\r\n        animation.push(animationobject)\r\n        j-=1\r\n        \r\n    }\r\n}\r\nreturn animation\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingComponents/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SortingVisualizer/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}